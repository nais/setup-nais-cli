name: Manual Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 1.0.0 - do not include v prefix)'
        required: true
        type: string
      prerelease:
        description: 'Mark as prerelease'
        required: false
        type: boolean
        default: false

permissions:
  contents: write

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Mise
        uses: jdx/mise-action@v2
        with:
          cache: false

      - name: Run tests
        run: mise run check

      - name: Validate version format
        run: |
          if ! echo "${{ inputs.version }}" | grep -E '^[0-9]+\.[0-9]+\.[0-9]+$'; then
            echo "Error: Version must be in format X.Y.Z (e.g., 1.0.0)"
            exit 1
          fi

      - name: Set version variables
        id: version
        run: |
          VERSION="${{ inputs.version }}"
          TAG="v${VERSION}"
          MAJOR_VERSION="v$(echo $VERSION | cut -d. -f1)"
          
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "tag=$TAG" >> $GITHUB_OUTPUT
          echo "major_version=$MAJOR_VERSION" >> $GITHUB_OUTPUT

      - name: Check if tag exists
        run: |
          if git rev-parse ${{ steps.version.outputs.tag }} >/dev/null 2>&1; then
            echo "Error: Tag ${{ steps.version.outputs.tag }} already exists"
            exit 1
          fi

      - name: Create and push tag
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          git tag -a ${{ steps.version.outputs.tag }} -m "Release ${{ steps.version.outputs.tag }}"
          git push origin ${{ steps.version.outputs.tag }}

      - name: Create release
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          PRERELEASE_FLAG=""
          if [ "${{ inputs.prerelease }}" = "true" ]; then
            PRERELEASE_FLAG="--prerelease"
          fi
          
          gh release create ${{ steps.version.outputs.tag }} \
            --title "Release ${{ steps.version.outputs.tag }}" \
            --notes "## Changes in ${{ steps.version.outputs.tag }}
          
          See the [commit history](https://github.com/${{ github.repository }}/commits/${{ steps.version.outputs.tag }}) for details.
          
          ## Usage
          
          Use the specific version:
          \`\`\`yaml
          - uses: nais/setup-nais-cli@${{ steps.version.outputs.tag }}
          \`\`\`
          
          Or use the major version tag for automatic patch/minor updates:
          \`\`\`yaml
          - uses: nais/setup-nais-cli@${{ steps.version.outputs.major_version }}
          \`\`\`" \
            $PRERELEASE_FLAG

      - name: Update major version tag
        if: ${{ !inputs.prerelease }}
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          # Force update the major version tag to point to this commit
          git tag -fa ${{ steps.version.outputs.major_version }} \
            -m "Update ${{ steps.version.outputs.major_version }} to ${{ steps.version.outputs.tag }}"
          git push origin ${{ steps.version.outputs.major_version }} --force